#!/usr/bin/env bash
":"; [[ $EMACS = *"term"* ]] && EMACS=emacs || EMACS=${EMACS:-emacs} # -*-emacs-lisp-*-
":"; command -v $EMACS >/dev/null || { >&2 echo "Emacs isn't installed"; exit 1; }
":"; NUCLEUSFILE_RAW="${BASH_SOURCE:-${(%):-%x}}"
":"; NUCLEUSFILE=$([[ -L "$NUCLEUSFILE_RAW" ]] && echo $(readlink $NUCLEUSFILE_RAW) || echo $NUCLEUSFILE_RAW)
":"; NUCLEUSBASE=$(dirname "$NUCLEUSFILE")/../..
":"; [[ $1 == doc || $1 == doctor ]] && { cd "$NUCLEUSBASE"; exec $EMACS --script nucleus/bin/nucleus-doctor; exit 0; }
":"; [[ $1 == run ]] && { cd "$NUCLEUSBASE"; shift; exec $EMACS -q --no-splash -l nucleus/bin/nucleus "$@"; exit 0; }
":"; exec $EMACS --script "$0" -- $@
":"; exit 0

(defun usage ()
  (with-temp-buffer
    (insert (format! "%s %s [COMMAND] [ARGS...]\n"
                     (bold "Usage:")
                     (file-name-nondirectory load-file-name))
            "\n"
            "A command line interfacing for managing nucleus; including\n"
            "package management, diagnostics, unit tests, and byte-compilation.\n"
            "\n"
            (format! (bold "Example:\n"))
            "  nucleus install\n"
            "  nucleus help update\n"
            "  nucleus compile :nucleus lang/haskell lang/emacs-lisp\n"
            "  nucleus run\n"
            "  nucleus run -nw file.txt file2.el\n"
            "\n"
            (format! (bold "Options:\n"))
            "  -d --debug\t\tTurns on nucleus-debug-mode (and debug-on-error)\n"
            "  -e --emacsd DIR\tUse the emacs config at DIR (e.g. ~/.emacs.d)\n"
            "  -i --insecure\t\tDisable TLS/SSL validation (not recommended)\n"
            "  -y --yes\t\tAuto-accept all confirmation prompts\n\n")
    (princ (buffer-string)))
  (nucleus--dispatch-help))

;;
(let ((args (cdr (cdr (cdr command-line-args))))
      (emacs-dir (expand-file-name
                  "../../"
                  (file-name-directory (file-truename load-file-name)))))
  ;; Parse options
  (while (ignore-errors (string-prefix-p "-" (car args)))
    (pcase (pop args)
      ((or "-h" "--help")
       (error "Did you mean 'nucleus help'?"))
      ((or "-d" "--debug")
       (setenv "DEBUG" "1")
       (message "Debug mode on"))
      ((or "-i" "--insecure")
       (setenv "INSECURE" "1")
       (message "Insecure mode on"))
      ((or "-e" "--emacsd")
       (setq emacs-dir (expand-file-name (concat (pop args) "/")))
       (message "Emacs directory changed to %s" emacs-dir))
      ((or "-y" "--yes")
       (setenv "YES" "1")
       (message "Auto-yes mode on"))))

  (or (file-directory-p emacs-dir)
      (error "%s does not exist" emacs-dir))

  ;; Bootstrap Nucleus
  (load (expand-file-name "init" emacs-dir)
        nil 'nomessage)

  (cond ((not noninteractive)
         (nucleus|run-all-startup-hooks))
        ((and (not (cdr args))
              (member (car args) '("help" "h")))
         (usage))
        ((not args)
         (message "No command detected, aborting!\n\nRun %s help for documentation."
                  (file-name-nondirectory load-file-name)))
        ((let ((default-directory emacs-dir))
           (setq argv nil
                 noninteractive 'nucleus)
           (condition-case e
               (nucleus-dispatch (car args) (cdr args))
             (user-error
              (signal (car e) (cdr e)))
             ((debug error)
              (message "--------------------------------------------------\n")
              (message "There was an unexpected error:")
              (message "  %s (%s)" (get (car e) 'error-message) (car e))
              (dolist (item (cdr e))
                (message "  %s" item))
              (unless debug-on-error
                (message
                 (concat "\nRun the command again with the -d (or --debug) option to enable debug\n"
                         "mode and, hopefully, generate a stack trace. If you decide to file a bug\n"
                         "report, please include it!\n\n"
                         "Emacs outputs to standard error, so you'll need to redirect stderr to\n"
                         "stdout to pipe this to a file or clipboard!\n\n"
                         "  e.g. nucleus -d install 2>&1 | clipboard-program"))
                (signal 'nucleus-error e))))))))
